{"ast":null,"code":"var _jsxFileName = \"/home/samy/Bureau/irc2/front/src/pages/Messenger/Messenger.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState, useRef } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport axios from \"axios\";\nimport \"./messenger.css\";\nimport Conversation from \"../../components/Conversation/Conversation\";\nimport Infobar from \"../../components/Infobar/Infobar\"; // import { io } from \"socket.io-client\";\n\nimport Chat from \"../../components/Chat/Chat\";\nimport Input from \"../../components/Input/Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Messenger() {\n  _s();\n\n  //le user connecter\n  const {\n    user\n  } = useContext(AuthContext); //nouveau message envoyé\n\n  const [newMessage, setNewMessage] = useState(\"\"); //toute les conversation d'un user\n\n  const [conversations, setConversations] = useState([]); //conversation ouverte\n\n  const [currentChat, setCurrentChat] = useState(null); //tous les messages\n\n  const [messages, setMessages] = useState([]); //SOCKET le message qui arrive avec get message socket\n\n  const [arrivalMessage, setArrivalMessage] = useState(null); //create une conversation\n\n  const [select, setSelect] = useState(false); //SOCKET tous les personnes dans le socket\n\n  const [OnlineUsers, setOnlineUsers] = useState([]); //la connection au socket\n  // const socket = useRef();\n  // le dernier message envoyé\n\n  const scrollRef = useRef(); // //SOCKET\n  // useEffect(() => {\n  //   //on connection\n  //   socket.current = io(\"ws://localhost:8080\");\n  //   console.log(socket);\n  //   //on ajoute le message envoyé dans arrivalmessage\n  //   socket.current.on(\"getMessage\", (data) => {\n  //     setArrivalMessage({\n  //       sender: data.senderId,\n  //       text: data.text,\n  //       createdAt: Date.now(),\n  //     });\n  //   });\n  // }, []);\n  //BDD On recupere les messages en bdd\n\n  useEffect(() => {\n    //BDD on recupere tous les messages d'une conversation et on les met dans messages\n    const getMessages = async () => {\n      try {\n        const res = await axios.get(\"http://localhost:8080/api/messages/\" + (currentChat === null || currentChat === void 0 ? void 0 : currentChat._id));\n        setMessages(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    getMessages();\n  }, [currentChat]); //fonction qui envoie un message\n\n  const handleSubmit = async e => {\n    e.preventDefault(); //BDD on ajoute le nouveau message en bdd et dans le tableau de messages\n\n    const message = {\n      sender: user._id,\n      text: newMessage,\n      conversationId: currentChat._id\n    };\n\n    try {\n      const res = await axios.post(\"http://localhost:8080/api/messages\", message);\n      setMessages([...messages, res.data]);\n      setNewMessage(\"\");\n    } catch (err) {\n      console.log(err);\n    } //SOCKET receiverid = currentchat.Members ! userid\n    // const receiverId = currentChat.members.find(\n    //   (member) => member !== user._id\n    // );\n    // //SOCKET emit le newmessage\n    //     socket.current.emit(\"sendMessage\", {\n    //       senderId: user._id,\n    //       receiverId,\n    //       text: newMessage,\n    //     });\n\n  }; //je ne sais pas ce que ca fais\n\n\n  useEffect(() => {\n    arrivalMessage && (currentChat === null || currentChat === void 0 ? void 0 : currentChat.members.includes(arrivalMessage.sender)) && setMessages(prev => [...prev, arrivalMessage]);\n  }, [arrivalMessage, currentChat]); // //SOCKET ajoute un user dans le socket\n  // useEffect(() => {\n  //   // des que le user change ca l'ajoute dans les user connecter\n  //   socket.current.emit(\"addUser\", user._id);\n  // }, [user]);\n\n  useEffect(() => {\n    //BDD on recupere tous les conversation d'un user et les met dans conversations\n    const getConversations = async () => {\n      try {\n        const res = await axios.get(\"http://localhost:8080/api/conversation/\" + user._id);\n        setConversations(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    getConversations();\n  }, [user._id, conversations, currentChat]); //on descend vers le dernier message\n\n  useEffect(() => {\n    var _scrollRef$current;\n\n    (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]); //fonction qui crée une conversation\n\n  const handleCreateConv = () => {\n    setSelect(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messengerPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messengerLeft\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"titleleft\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Discussion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"userWrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"titleUser\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"User Online\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), select ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"createButton\",\n            onClick: handleCreateConv,\n            children: \"create a conv\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"createButton\",\n            onClick: () => setSelect(true),\n            children: \"select\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conversationsWrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"titleConversation\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"All conversations\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), conversations.map(conversation => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"conversationWrapper\",\n          onClick: () => setCurrentChat(conversation),\n          children: /*#__PURE__*/_jsxDEV(Conversation, {\n            setCurrentChat: setCurrentChat,\n            currentChat: currentChat,\n            conversation: conversation,\n            currentUser: user\n          }, conversation._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messengerMiddle\",\n      children: currentChat ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Infobar, {\n          currentChat: currentChat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Chat, {\n          messages: messages,\n          scrollRef: scrollRef,\n          user: user,\n          setNewMessage: setNewMessage,\n          newMessage: newMessage,\n          handleSubmit: handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          setNewMessage: setNewMessage,\n          newMessage: newMessage,\n          handleSubmit: handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"noConversationText\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Open a conversation to start a chat.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Messenger, \"0Vsb6i1t3JpMEUuvrWXQAL5aTwY=\");\n\n_c = Messenger;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messenger\");","map":{"version":3,"sources":["/home/samy/Bureau/irc2/front/src/pages/Messenger/Messenger.js"],"names":["useContext","useEffect","useState","useRef","AuthContext","axios","Conversation","Infobar","Chat","Input","Messenger","user","newMessage","setNewMessage","conversations","setConversations","currentChat","setCurrentChat","messages","setMessages","arrivalMessage","setArrivalMessage","select","setSelect","OnlineUsers","setOnlineUsers","scrollRef","getMessages","res","get","_id","data","err","console","log","handleSubmit","e","preventDefault","message","sender","text","conversationId","post","members","includes","prev","getConversations","current","scrollIntoView","behavior","handleCreateConv","map","conversation"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState, useRef } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport axios from \"axios\";\nimport \"./messenger.css\";\nimport Conversation from \"../../components/Conversation/Conversation\";\nimport Infobar from \"../../components/Infobar/Infobar\";\n// import { io } from \"socket.io-client\";\nimport Chat from \"../../components/Chat/Chat\";\nimport Input from \"../../components/Input/Input\";\n\nexport default function Messenger() {\n  //le user connecter\n  const { user } = useContext(AuthContext);\n  //nouveau message envoyé\n  const [newMessage, setNewMessage] = useState(\"\");\n  //toute les conversation d'un user\n  const [conversations, setConversations] = useState([]);\n  //conversation ouverte\n  const [currentChat, setCurrentChat] = useState(null);\n  //tous les messages\n  const [messages, setMessages] = useState([]);\n  //SOCKET le message qui arrive avec get message socket\n  const [arrivalMessage, setArrivalMessage] = useState(null);\n  //create une conversation\n  const [select, setSelect] = useState(false);\n  //SOCKET tous les personnes dans le socket\n  const [OnlineUsers, setOnlineUsers] = useState([]);\n  //la connection au socket\n  // const socket = useRef();\n  // le dernier message envoyé\n  const scrollRef = useRef();\n\n  // //SOCKET\n  // useEffect(() => {\n  //   //on connection\n  //   socket.current = io(\"ws://localhost:8080\");\n  //   console.log(socket);\n  //   //on ajoute le message envoyé dans arrivalmessage\n  //   socket.current.on(\"getMessage\", (data) => {\n  //     setArrivalMessage({\n  //       sender: data.senderId,\n  //       text: data.text,\n  //       createdAt: Date.now(),\n  //     });\n  //   });\n  // }, []);\n\n  //BDD On recupere les messages en bdd\n  useEffect(() => {\n    //BDD on recupere tous les messages d'une conversation et on les met dans messages\n    const getMessages = async () => {\n      try {\n        const res = await axios.get(\n          \"http://localhost:8080/api/messages/\" + currentChat?._id\n        );\n        setMessages(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    getMessages();\n  }, [currentChat]);\n\n  //fonction qui envoie un message\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    //BDD on ajoute le nouveau message en bdd et dans le tableau de messages\n    const message = {\n      sender: user._id,\n      text: newMessage,\n      conversationId: currentChat._id,\n    };\n\n    try {\n      const res = await axios.post(\n        \"http://localhost:8080/api/messages\",\n        message\n      );\n      setMessages([...messages, res.data]);\n      setNewMessage(\"\");\n    } catch (err) {\n      console.log(err);\n    }\n\n    //SOCKET receiverid = currentchat.Members ! userid\n    // const receiverId = currentChat.members.find(\n    //   (member) => member !== user._id\n    // );\n\n    // //SOCKET emit le newmessage\n    //     socket.current.emit(\"sendMessage\", {\n    //       senderId: user._id,\n    //       receiverId,\n    //       text: newMessage,\n    //     });\n  };\n\n  //je ne sais pas ce que ca fais\n  useEffect(() => {\n    arrivalMessage &&\n      currentChat?.members.includes(arrivalMessage.sender) &&\n      setMessages((prev) => [...prev, arrivalMessage]);\n  }, [arrivalMessage, currentChat]);\n\n  // //SOCKET ajoute un user dans le socket\n  // useEffect(() => {\n  //   // des que le user change ca l'ajoute dans les user connecter\n  //   socket.current.emit(\"addUser\", user._id);\n  // }, [user]);\n\n  useEffect(() => {\n    //BDD on recupere tous les conversation d'un user et les met dans conversations\n    const getConversations = async () => {\n      try {\n        const res = await axios.get(\n          \"http://localhost:8080/api/conversation/\" + user._id\n        );\n        setConversations(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    getConversations();\n  }, [user._id, conversations, currentChat]);\n\n  //on descend vers le dernier message\n  useEffect(() => {\n    scrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  //fonction qui crée une conversation\n  const handleCreateConv = () => {\n    setSelect(false);\n  };\n\n  return (\n    <div className=\"messengerPage\">\n      <div className=\"messengerLeft\">\n        <div className=\"titleleft\">\n          <h1>Discussion</h1>\n        </div>\n\n        <div className=\"userWrapper\">\n          <div className=\"titleUser\">\n            <h3>User Online</h3>\n            {select ? (\n              <button className=\"createButton\" onClick={handleCreateConv}>\n                create a conv\n              </button>\n            ) : (\n              <button className=\"createButton\" onClick={() => setSelect(true)}>\n                select\n              </button>\n            )}\n          </div>\n        </div>\n\n        <div className=\"conversationsWrapper\">\n          <div className=\"titleConversation\">\n            <h3>All conversations</h3>\n          </div>\n\n          {conversations.map((conversation) => (\n            <div\n              className=\"conversationWrapper\"\n              onClick={() => setCurrentChat(conversation)}\n            >\n              <Conversation\n                setCurrentChat={setCurrentChat}\n                currentChat={currentChat}\n                key={conversation._id}\n                conversation={conversation}\n                currentUser={user}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"messengerMiddle\">\n        {currentChat ? (\n          <div>\n            <Infobar currentChat={currentChat} />\n            <Chat\n              messages={messages}\n              scrollRef={scrollRef}\n              user={user}\n              setNewMessage={setNewMessage}\n              newMessage={newMessage}\n              handleSubmit={handleSubmit}\n            />\n\n            <Input\n              setNewMessage={setNewMessage}\n              newMessage={newMessage}\n              handleSubmit={handleSubmit}\n            />\n          </div>\n        ) : (\n          <div className=\"noConversationText\">\n            <span>Open a conversation to start a chat.</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}