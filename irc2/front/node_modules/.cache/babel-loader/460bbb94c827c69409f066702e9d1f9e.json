{"ast":null,"code":"var _jsxFileName = \"/home/samy/Bureau/irc2/front/src/pages/Messenger/Messenger.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState, useRef } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport axios from \"axios\";\nimport \"./messenger.css\";\nimport Conversation from \"../../components/Conversation/Conversation\";\nimport Infobar from \"../../components/Infobar/Infobar\";\nimport User from \"../../components/User/User\";\nimport { io } from \"socket.io-client\";\nimport Chat from \"../../components/Chat/Chat\";\nimport Input from \"../../components/Input/Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Messenger() {\n  _s();\n\n  //le user connecter\n  const {\n    user\n  } = useContext(AuthContext); //nouveau message envoyé\n\n  const [newMessage, setNewMessage] = useState(\"\"); //toute les conversation d'un user\n\n  const [conversations, setConversations] = useState([]); //conversation ouverte\n\n  const [currentChat, setCurrentChat] = useState(null); //tous les messages\n\n  const [messages, setMessages] = useState([]); //SOCKET le message qui arrive avec get message socket\n\n  const [arrivalMessage, setArrivalMessage] = useState(null); //create une conversation\n\n  const [select, setSelect] = useState(false); //SOCKET tous les personnes dans le socket\n\n  const [OnlineUsers, setOnlineUsers] = useState([]); //la connection au socket\n\n  const socket = useRef(); // le dernier message envoyé\n\n  const scrollRef = useRef();\n  useEffect(() => {\n    console.log(conversations);\n  }, []); // //SOCKET\n  // useEffect(() => {\n  //   //on connection\n  //   socket.current = io(\"ws://localhost:8080\");\n  //   console.log(socket);\n  //   //on ajoute le message envoyé dans arrivalmessage\n  //   socket.current.on(\"getMessage\", (data) => {\n  //     setArrivalMessage({\n  //       sender: data.senderId,\n  //       text: data.text,\n  //       createdAt: Date.now(),\n  //     });\n  //   });\n  // }, []);\n  //BDD On recupere les messages en bdd\n\n  useEffect(() => {\n    //BDD on recupere tous les messages d'une conversation et on les met dans messages\n    const getMessages = async () => {\n      try {\n        const res = await axios.get(\"http://localhost:8080/api/messages/\" + (currentChat === null || currentChat === void 0 ? void 0 : currentChat._id));\n        setMessages(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    getMessages();\n  }, [currentChat]); //fonction qui envoie un message\n\n  const handleSubmit = async e => {\n    e.preventDefault(); //BDD on ajoute le nouveau message en bdd et dans le tableau de messages\n\n    const message = {\n      sender: user._id,\n      text: newMessage,\n      conversationId: currentChat._id\n    };\n\n    try {\n      const res = await axios.post(\"http://localhost:8080/api/messages\", message);\n      setMessages([...messages, res.data]);\n      setNewMessage(\"\");\n    } catch (err) {\n      console.log(err);\n    } //SOCKET receiverid = currentchat.Members ! userid\n    // const receiverId = currentChat.members.find(\n    //   (member) => member !== user._id\n    // );\n    // //SOCKET emit le newmessage\n    //     socket.current.emit(\"sendMessage\", {\n    //       senderId: user._id,\n    //       receiverId,\n    //       text: newMessage,\n    //     });\n\n  }; //je ne sais pas ce que ca fais\n\n\n  useEffect(() => {\n    arrivalMessage && (currentChat === null || currentChat === void 0 ? void 0 : currentChat.members.includes(arrivalMessage.sender)) && setMessages(prev => [...prev, arrivalMessage]);\n  }, [arrivalMessage, currentChat]); //SOCKET ajoute un user dans le socket\n\n  useEffect(() => {\n    // des que le user change ca l'ajoute dans les user connecter\n    socket.current.emit(\"addUser\", user._id);\n  }, [user]);\n  useEffect(() => {\n    //BDD on recupere tous les conversation d'un user et les met dans conversations \n    const getConversations = async () => {\n      try {\n        const res = await axios.get(\"http://localhost:8080/api/conversation/\" + user._id);\n        setConversations(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    getConversations();\n  }, [user._id, conversations]); //on descend vers le dernier message\n\n  useEffect(() => {\n    var _scrollRef$current;\n\n    (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]); //fonction qui crée une conversation\n\n  const handleCreateConv = () => {\n    setSelect(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messengerPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messengerLeft\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"titleleft\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Discussion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"userWrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"titleUser\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"User Online\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this), select ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"createButton\",\n            onClick: handleCreateConv,\n            children: \"create a conv\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"createButton\",\n            onClick: () => setSelect(true),\n            children: \"select\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conversationsWrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"titleConversation\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"All conversations\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this), conversations.map(conversation => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"conversationWrapper\",\n          onClick: () => setCurrentChat(conversation),\n          children: /*#__PURE__*/_jsxDEV(Conversation, {\n            setCurrentChat: setCurrentChat,\n            currentChat: currentChat,\n            conversation: conversation,\n            currentUser: user\n          }, conversation._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messengerMiddle\",\n      children: currentChat ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Infobar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Chat, {\n          messages: messages,\n          scrollRef: scrollRef,\n          user: user,\n          setNewMessage: setNewMessage,\n          newMessage: newMessage,\n          handleSubmit: handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          setNewMessage: setNewMessage,\n          newMessage: newMessage,\n          handleSubmit: handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"noConversationText\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Open a conversation to start a chat.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Messenger, \"Vs9syEBnRhXlUHwQljXg5p+HZnw=\");\n\n_c = Messenger;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messenger\");","map":{"version":3,"sources":["/home/samy/Bureau/irc2/front/src/pages/Messenger/Messenger.js"],"names":["useContext","useEffect","useState","useRef","AuthContext","axios","Conversation","Infobar","User","io","Chat","Input","Messenger","user","newMessage","setNewMessage","conversations","setConversations","currentChat","setCurrentChat","messages","setMessages","arrivalMessage","setArrivalMessage","select","setSelect","OnlineUsers","setOnlineUsers","socket","scrollRef","console","log","getMessages","res","get","_id","data","err","handleSubmit","e","preventDefault","message","sender","text","conversationId","post","members","includes","prev","current","emit","getConversations","scrollIntoView","behavior","handleCreateConv","map","conversation"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState, useRef } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport axios from \"axios\";\nimport \"./messenger.css\";\nimport Conversation from \"../../components/Conversation/Conversation\";\nimport Infobar from \"../../components/Infobar/Infobar\";\nimport User from \"../../components/User/User\";\nimport { io } from \"socket.io-client\";\nimport Chat from \"../../components/Chat/Chat\";\nimport Input from \"../../components/Input/Input\";\n\nexport default function Messenger() {\n  //le user connecter\n  const { user } = useContext(AuthContext);\n  //nouveau message envoyé\n  const [newMessage, setNewMessage] = useState(\"\");\n  //toute les conversation d'un user\n  const [conversations, setConversations] = useState([]);\n  //conversation ouverte\n  const [currentChat, setCurrentChat] = useState(null);\n  //tous les messages\n  const [messages, setMessages] = useState([]);\n  //SOCKET le message qui arrive avec get message socket\n  const [arrivalMessage, setArrivalMessage] = useState(null);\n  //create une conversation\n  const [select, setSelect] = useState(false);\n  //SOCKET tous les personnes dans le socket\n  const [OnlineUsers, setOnlineUsers] = useState([]);\n  //la connection au socket\n  const socket = useRef();\n  // le dernier message envoyé\n  const scrollRef = useRef();\n  useEffect(() => {\n    console.log(conversations);\n  },[])\n\n  // //SOCKET\n  // useEffect(() => {\n  //   //on connection\n  //   socket.current = io(\"ws://localhost:8080\");\n  //   console.log(socket);\n  //   //on ajoute le message envoyé dans arrivalmessage\n  //   socket.current.on(\"getMessage\", (data) => {\n  //     setArrivalMessage({\n  //       sender: data.senderId,\n  //       text: data.text,\n  //       createdAt: Date.now(),\n  //     });\n  //   });\n  // }, []);\n\n\n  //BDD On recupere les messages en bdd\n  useEffect(() => {\n    //BDD on recupere tous les messages d'une conversation et on les met dans messages\n    const getMessages = async () => {\n      try {\n        const res = await axios.get(\n          \"http://localhost:8080/api/messages/\" + currentChat?._id\n        );\n        setMessages(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    getMessages();\n  }, [currentChat]);\n\n  //fonction qui envoie un message\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    //BDD on ajoute le nouveau message en bdd et dans le tableau de messages\n    const message = {\n      sender: user._id,\n      text: newMessage,\n      conversationId: currentChat._id,\n    };\n\n    try {\n      const res = await axios.post(\n        \"http://localhost:8080/api/messages\",\n        message\n      );\n      setMessages([...messages, res.data]);\n      setNewMessage(\"\");\n    } catch (err) {\n      console.log(err);\n    }\n\n//SOCKET receiverid = currentchat.Members ! userid\n    // const receiverId = currentChat.members.find(\n    //   (member) => member !== user._id\n    // );\n\n// //SOCKET emit le newmessage\n//     socket.current.emit(\"sendMessage\", {\n//       senderId: user._id,\n//       receiverId,\n//       text: newMessage,\n//     });\n  };\n\n\n//je ne sais pas ce que ca fais\n  useEffect(() => {\n    arrivalMessage &&\n      currentChat?.members.includes(arrivalMessage.sender) &&\n      setMessages((prev) => [...prev, arrivalMessage]);\n  }, [arrivalMessage, currentChat]);\n\n\n  //SOCKET ajoute un user dans le socket\n  useEffect(() => {\n    // des que le user change ca l'ajoute dans les user connecter\n    socket.current.emit(\"addUser\", user._id);\n  }, [user]);\n\n  useEffect(() => {\n    //BDD on recupere tous les conversation d'un user et les met dans conversations \n    const getConversations = async () => {\n      try {\n        const res = await axios.get(\n          \"http://localhost:8080/api/conversation/\" + user._id\n        );\n        setConversations(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    getConversations();\n  }, [user._id,conversations]);\n\n\n\n\n\n\n//on descend vers le dernier message\n  useEffect(() => {\n    scrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n\n//fonction qui crée une conversation\n  const handleCreateConv = () => {\n    setSelect(false);\n  };\n\n\n\n  return (\n    <div className=\"messengerPage\">\n\n      <div className=\"messengerLeft\">\n        <div className=\"titleleft\">\n        <h1>Discussion</h1>\n        </div>\n       \n        \n\n        <div className=\"userWrapper\">\n          <div className=\"titleUser\">\n            <h3>User Online</h3>\n            {select ? (\n              <button className=\"createButton\" onClick={handleCreateConv}>\n                create a conv\n              </button>\n            ) : (\n              <button className=\"createButton\" onClick={() => setSelect(true)}>\n                select\n              </button>\n            )}\n          </div>\n          {/* <div className=\"userOnlineList\">\n          <User select={select} />\n          <User select={select} />\n          <User select={select} />\n          <User select={select} />\n          <User select={select} />\n          <User select={select} />\n          <User select={select} />\n          <User select={select} />\n          <User select={select} />\n          <User select={select} />\n          <User select={select} />\n          <User select={select} />\n          </div> */}\n        </div>\n\n\n      \n\n          \n          <div className=\"conversationsWrapper\">\n            <div className=\"titleConversation\">\n            <h3>All conversations</h3>\n            </div>\n         \n            {conversations.map((conversation) => (\n              <div className=\"conversationWrapper\" onClick={() => setCurrentChat(conversation)}>\n                <Conversation\n                setCurrentChat={setCurrentChat}\n                  currentChat={currentChat}\n                  key={conversation._id}\n                  conversation={conversation}\n                  currentUser={user}\n                />\n              </div>\n            ))}\n          </div>\n      </div>\n\n\n\n        <div className=\"messengerMiddle\">\n          {currentChat?\n            <div>\n              <Infobar />\n              <Chat\n                messages={messages}\n                scrollRef={scrollRef}\n                user={user}\n                setNewMessage={setNewMessage}\n                newMessage={newMessage}\n                handleSubmit={handleSubmit}\n              />\n               \n            <Input setNewMessage={setNewMessage} newMessage={newMessage} handleSubmit={handleSubmit} />\n          \n            </div>\n          :\n            <div className=\"noConversationText\">\n              <span>Open a conversation to start a chat.</span>\n            </div>\n          }\n        </div>\n\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}