{"ast":null,"code":"var _jsxFileName = \"/home/samy/Bureau/irc2/front/src/pages/Messenger/Messenger.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState, useRef } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport axios from \"axios\";\nimport \"./messenger.css\";\nimport Conversation from \"../../components/Conversation/Conversation\";\nimport Infobar from \"../../components/Infobar/Infobar\"; // import { io } from \"socket.io-client\";\n\nimport Chat from \"../../components/Chat/Chat\";\nimport Input from \"../../components/Input/Input\";\nimport CreateConv from \"../../components/Createconv/CreateConv\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Messenger() {\n  _s();\n\n  //le user connecter\n  const {\n    user\n  } = useContext(AuthContext); //nouveau message envoyé\n\n  const [newMessage, setNewMessage] = useState(\"\"); //toute les conversation d'un user\n\n  const [conversations, setConversations] = useState([]); //conversation ouverte\n\n  const [currentChat, setCurrentChat] = useState(null); //tous les messages\n\n  const [messages, setMessages] = useState([]); //SOCKET le message qui arrive avec get message socket\n\n  const [arrivalMessage, setArrivalMessage] = useState(null); //SOCKET tous les personnes dans le socket\n\n  const [OnlineUsers, setOnlineUsers] = useState([]); //la connection au socket\n  // const socket = useRef();\n  // le dernier message envoyé\n\n  const scrollRef = useRef(); // //SOCKET\n  // useEffect(() => {\n  //   //on connection\n  //   socket.current = io(\"ws://localhost:8080\");\n  //   console.log(socket);\n  //   //on ajoute le message envoyé dans arrivalmessage\n  //   socket.current.on(\"getMessage\", (data) => {\n  //     setArrivalMessage({\n  //       sender: data.senderId,\n  //       text: data.text,\n  //       createdAt: Date.now(),\n  //     });\n  //   });\n  // }, []);\n  //BDD On recupere les messages en bdd\n\n  useEffect(() => {\n    //BDD on recupere tous les messages d'une conversation et on les met dans messages\n    const getMessages = async () => {\n      try {\n        const res = await axios.get(\"http://localhost:8080/api/messages/\" + (currentChat === null || currentChat === void 0 ? void 0 : currentChat._id));\n        setMessages(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    getMessages();\n  }, [currentChat]); //fonction qui envoie un message\n\n  const handleSubmit = async e => {\n    e.preventDefault(); //BDD on ajoute le nouveau message en bdd et dans le tableau de messages\n\n    const message = {\n      sender: user._id,\n      text: newMessage,\n      conversationId: currentChat._id\n    };\n\n    try {\n      const res = await axios.post(\"http://localhost:8080/api/messages\", message);\n      setMessages([...messages, res.data]);\n      setNewMessage(\"\");\n    } catch (err) {\n      console.log(err);\n    } //SOCKET receiverid = currentchat.Members ! userid\n    // const receiverId = currentChat.members.find(\n    //   (member) => member !== user._id\n    // );\n    // //SOCKET emit le newmessage\n    //     socket.current.emit(\"sendMessage\", {\n    //       senderId: user._id,\n    //       receiverId,\n    //       text: newMessage,\n    //     });\n\n  }; //je ne sais pas ce que ca fais\n\n\n  useEffect(() => {\n    arrivalMessage && (currentChat === null || currentChat === void 0 ? void 0 : currentChat.members.includes(arrivalMessage.sender)) && setMessages(prev => [...prev, arrivalMessage]);\n  }, [arrivalMessage, currentChat]); // //SOCKET ajoute un user dans le socket\n  // useEffect(() => {\n  //   // des que le user change ca l'ajoute dans les user connecter\n  //   socket.current.emit(\"addUser\", user._id);\n  // }, [user]);\n\n  useEffect(() => {\n    //BDD on recupere tous les conversation d'un user et les met dans conversations\n    const getConversations = async () => {\n      try {\n        const res = await axios.get(\"http://localhost:8080/api/conversation/\" + user._id);\n        setConversations(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    getConversations();\n  }, [user._id, conversations, currentChat]); //on descend vers le dernier message\n\n  useEffect(() => {\n    var _scrollRef$current;\n\n    (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messengerPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messengerLeft\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"titleleft\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Discussion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"userWrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"titleUser\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"User Online\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CreateConv, {\n            currentUser: user\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conversationsWrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"titleConversation\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"All conversations\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), conversations.map(conversation => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"conversationWrapper\",\n          onClick: () => setCurrentChat(conversation),\n          children: /*#__PURE__*/_jsxDEV(Conversation, {\n            setCurrentChat: setCurrentChat,\n            currentChat: currentChat,\n            conversation: conversation,\n            currentUser: user\n          }, conversation._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messengerMiddle\",\n      children: currentChat ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Infobar, {\n          currentChat: currentChat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Chat, {\n          messages: messages,\n          scrollRef: scrollRef,\n          user: user,\n          setNewMessage: setNewMessage,\n          newMessage: newMessage,\n          handleSubmit: handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          setNewMessage: setNewMessage,\n          newMessage: newMessage,\n          handleSubmit: handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"noConversationText\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Open a conversation to start a chat.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Messenger, \"s11MfbECAhoF9pHXMk3g9FIoiek=\");\n\n_c = Messenger;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messenger\");","map":{"version":3,"sources":["/home/samy/Bureau/irc2/front/src/pages/Messenger/Messenger.js"],"names":["useContext","useEffect","useState","useRef","AuthContext","axios","Conversation","Infobar","Chat","Input","CreateConv","Messenger","user","newMessage","setNewMessage","conversations","setConversations","currentChat","setCurrentChat","messages","setMessages","arrivalMessage","setArrivalMessage","OnlineUsers","setOnlineUsers","scrollRef","getMessages","res","get","_id","data","err","console","log","handleSubmit","e","preventDefault","message","sender","text","conversationId","post","members","includes","prev","getConversations","current","scrollIntoView","behavior","map","conversation"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState, useRef } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport axios from \"axios\";\nimport \"./messenger.css\";\nimport Conversation from \"../../components/Conversation/Conversation\";\nimport Infobar from \"../../components/Infobar/Infobar\";\n// import { io } from \"socket.io-client\";\nimport Chat from \"../../components/Chat/Chat\";\nimport Input from \"../../components/Input/Input\";\nimport CreateConv from \"../../components/Createconv/CreateConv\";\nexport default function Messenger() {\n  //le user connecter\n  const { user } = useContext(AuthContext);\n  //nouveau message envoyé\n  const [newMessage, setNewMessage] = useState(\"\");\n  //toute les conversation d'un user\n  const [conversations, setConversations] = useState([]);\n  //conversation ouverte\n  const [currentChat, setCurrentChat] = useState(null);\n  //tous les messages\n  const [messages, setMessages] = useState([]);\n  //SOCKET le message qui arrive avec get message socket\n  const [arrivalMessage, setArrivalMessage] = useState(null);\n\n  //SOCKET tous les personnes dans le socket\n  const [OnlineUsers, setOnlineUsers] = useState([]);\n  //la connection au socket\n  // const socket = useRef();\n  // le dernier message envoyé\n  const scrollRef = useRef();\n \n  // //SOCKET\n  // useEffect(() => {\n  //   //on connection\n  //   socket.current = io(\"ws://localhost:8080\");\n  //   console.log(socket);\n  //   //on ajoute le message envoyé dans arrivalmessage\n  //   socket.current.on(\"getMessage\", (data) => {\n  //     setArrivalMessage({\n  //       sender: data.senderId,\n  //       text: data.text,\n  //       createdAt: Date.now(),\n  //     });\n  //   });\n  // }, []);\n\n  //BDD On recupere les messages en bdd\n  useEffect(() => {\n    //BDD on recupere tous les messages d'une conversation et on les met dans messages\n    const getMessages = async () => {\n      try {\n        const res = await axios.get(\n          \"http://localhost:8080/api/messages/\" + currentChat?._id\n        );\n        setMessages(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    getMessages();\n  }, [currentChat]);\n\n  //fonction qui envoie un message\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    //BDD on ajoute le nouveau message en bdd et dans le tableau de messages\n    const message = {\n      sender: user._id,\n      text: newMessage,\n      conversationId: currentChat._id,\n    };\n\n    try {\n      const res = await axios.post(\n        \"http://localhost:8080/api/messages\",\n        message\n      );\n      setMessages([...messages, res.data]);\n      setNewMessage(\"\");\n    } catch (err) {\n      console.log(err);\n    }\n\n    //SOCKET receiverid = currentchat.Members ! userid\n    // const receiverId = currentChat.members.find(\n    //   (member) => member !== user._id\n    // );\n\n    // //SOCKET emit le newmessage\n    //     socket.current.emit(\"sendMessage\", {\n    //       senderId: user._id,\n    //       receiverId,\n    //       text: newMessage,\n    //     });\n  };\n\n  //je ne sais pas ce que ca fais\n  useEffect(() => {\n    arrivalMessage &&\n      currentChat?.members.includes(arrivalMessage.sender) &&\n      setMessages((prev) => [...prev, arrivalMessage]);\n  }, [arrivalMessage, currentChat]);\n\n  // //SOCKET ajoute un user dans le socket\n  // useEffect(() => {\n  //   // des que le user change ca l'ajoute dans les user connecter\n  //   socket.current.emit(\"addUser\", user._id);\n  // }, [user]);\n\n  useEffect(() => {\n    //BDD on recupere tous les conversation d'un user et les met dans conversations\n    const getConversations = async () => {\n      try {\n        const res = await axios.get(\n          \"http://localhost:8080/api/conversation/\" + user._id\n        );\n        setConversations(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    getConversations();\n  }, [user._id, conversations, currentChat]);\n\n  //on descend vers le dernier message\n  useEffect(() => {\n    scrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n \n\n  return (\n    <div className=\"messengerPage\">\n      \n      <div className=\"messengerLeft\">\n        <div className=\"titleleft\">\n          <h1>Discussion</h1>\n        </div>\n\n        <div className=\"userWrapper\">\n          <div className=\"titleUser\">\n\n            <h3>User Online</h3>\n            <CreateConv currentUser={user}/>\n            \n          </div>\n        </div>\n\n\n\n\n\n\n\n\n\n\n\n\n        <div className=\"conversationsWrapper\">\n          <div className=\"titleConversation\">\n            <h3>All conversations</h3>\n          </div>\n\n          {conversations.map((conversation) => (\n            <div\n              className=\"conversationWrapper\"\n              onClick={() => setCurrentChat(conversation)}\n            >\n              <Conversation\n                setCurrentChat={setCurrentChat}\n                currentChat={currentChat}\n                key={conversation._id}\n                conversation={conversation}\n                currentUser={user}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n\n\n\n\n\n\n\n\n      <div className=\"messengerMiddle\">\n        {currentChat ? (\n          <div>\n            <Infobar currentChat={currentChat} />\n            <Chat\n              messages={messages}\n              scrollRef={scrollRef}\n              user={user}\n              setNewMessage={setNewMessage}\n              newMessage={newMessage}\n              handleSubmit={handleSubmit}\n            />\n\n            <Input\n              setNewMessage={setNewMessage}\n              newMessage={newMessage}\n              handleSubmit={handleSubmit}\n            />\n          </div>\n        ) : (\n          <div className=\"noConversationText\">\n            <span>Open a conversation to start a chat.</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}