{"ast":null,"code":"var _jsxFileName = \"/home/samy/irc/front/src/pages/Messenger/Messenger.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState, useRef } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport axios from \"axios\";\nimport \"./messenger.css\";\nimport Conversation from \"../../components/Conversation/Conversation\";\nimport Message from \"../../components/Message/Message\";\nimport User from \"../../components/User/User\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Messenger() {\n  _s();\n\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [conversations, setConversations] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [arrivalMessage, setArrivalMessage] = useState(null);\n  const socket = useRef();\n  const [OnlineUsers, setOnlineUsers] = useState([]);\n  const {\n    user\n  } = useContext(AuthContext);\n  const scrollRef = useRef();\n  useEffect(() => {\n    socket.current = io(\"ws://localhost:8000\");\n    console.log(socket);\n    socket.current.on(\"getMessage\", data => {\n      setArrivalMessage({\n        sender: data.senderId,\n        text: data.text,\n        createdAt: Date.now()\n      });\n    });\n  }, []);\n  useEffect(() => {\n    arrivalMessage && (currentChat === null || currentChat === void 0 ? void 0 : currentChat.members.includes(arrivalMessage.sender)) && setMessages(prev => [...prev, arrivalMessage]);\n  }, [arrivalMessage, currentChat]);\n  useEffect(() => {\n    socket.current.emit(\"addUser\", user._id);\n    socket.current.on(\"getUsers\", users => {//   setOnlineUsers(\n      //     user.followings.filter((f) => users.some((u) => u.userId === f))\n      //   );\n    });\n  }, [user]);\n  useEffect(() => {\n    const getConversations = async () => {\n      try {\n        const res = await axios.get(\"http://localhost:8000/api/conversation/\" + user._id);\n        setConversations(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    getConversations();\n  }, [user._id]);\n  useEffect(() => {\n    const getMessages = async () => {\n      try {\n        const res = await axios.get(\"http://localhost:8000/api/messages/\" + currentChat._id);\n        setMessages(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    getMessages();\n  }, [currentChat]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const message = {\n      sender: user._id,\n      text: newMessage,\n      conversationId: currentChat._id\n    };\n\n    try {\n      const res = await axios.post(\"http://localhost:8000/api/messages\", message);\n      setMessages([...messages, res.data]);\n      setNewMessage(\"\");\n    } catch (err) {\n      console.log(err);\n    }\n\n    const receiverId = currentChat.members.find(member => member !== user._id);\n    socket.current.emit(\"sendMessage\", {\n      senderId: user._id,\n      receiverId,\n      text: newMessage\n    });\n  };\n\n  useEffect(() => {\n    var _scrollRef$current;\n\n    (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messengerPage\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messengerBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messengerLeft\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"All conversations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: conversations.map(conversation => /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => setCurrentChat(conversation),\n            children: /*#__PURE__*/_jsxDEV(Conversation, {\n              conversation: conversation,\n              currentUser: user\n            }, conversation._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messengerMiddle\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatBoxWrapper\",\n          children: currentChat ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chatWrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"top\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                  children: \"name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  children: \"modifier\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 141,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chatBoxMiddle\",\n              children: messages.map(m => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: scrollRef,\n                children: /*#__PURE__*/_jsxDEV(Message, {\n                  message: m,\n                  own: m.sender === user._id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chatBoxBottom\",\n              children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                className: \"chatMessageInput\",\n                placeholder: \"write something...\",\n                onChange: e => setNewMessage(e.target.value),\n                value: newMessage\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleSubmit,\n                children: \"Send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"noConversationText\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Open a conversation to start a chat.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"User Online\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(User, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(User, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(User, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"create conv\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Messenger, \"vukzVHnTXRBGNGH9eXFyBJWEbJ4=\");\n\n_c = Messenger;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messenger\");","map":{"version":3,"sources":["/home/samy/irc/front/src/pages/Messenger/Messenger.js"],"names":["useContext","useEffect","useState","useRef","AuthContext","axios","Conversation","Message","User","io","Messenger","newMessage","setNewMessage","conversations","setConversations","currentChat","setCurrentChat","messages","setMessages","arrivalMessage","setArrivalMessage","socket","OnlineUsers","setOnlineUsers","user","scrollRef","current","console","log","on","data","sender","senderId","text","createdAt","Date","now","members","includes","prev","emit","_id","users","getConversations","res","get","err","getMessages","handleSubmit","e","preventDefault","message","conversationId","post","receiverId","find","member","scrollIntoView","behavior","map","conversation","m","target","value"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState, useRef } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport axios from \"axios\";\nimport \"./messenger.css\";\nimport Conversation from \"../../components/Conversation/Conversation\";\nimport Message from \"../../components/Message/Message\";\nimport User from \"../../components/User/User\";\nimport { io } from \"socket.io-client\";\n\nexport default function Messenger() {\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [conversations, setConversations] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [arrivalMessage, setArrivalMessage] = useState(null);\n  const socket = useRef();\n  const [OnlineUsers, setOnlineUsers] = useState([]);\n  const { user } = useContext(AuthContext);\n  const scrollRef = useRef();\n  useEffect(() => {\n    socket.current = io(\"ws://localhost:8000\");\n    console.log(socket);\n    socket.current.on(\"getMessage\", (data) => {\n      setArrivalMessage({\n        sender: data.senderId,\n        text: data.text,\n        createdAt: Date.now(),\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n    arrivalMessage &&\n      currentChat?.members.includes(arrivalMessage.sender) &&\n      setMessages((prev) => [...prev, arrivalMessage]);\n  }, [arrivalMessage, currentChat]);\n\n  useEffect(() => {\n    socket.current.emit(\"addUser\", user._id);\n    socket.current.on(\"getUsers\", (users) => {\n    //   setOnlineUsers(\n\n    //     user.followings.filter((f) => users.some((u) => u.userId === f))\n    //   );\n    });\n  }, [user]);\n\n  useEffect(() => {\n    const getConversations = async () => {\n      try {\n        const res = await axios.get(\n          \"http://localhost:8000/api/conversation/\" + user._id\n        );\n        setConversations(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    getConversations();\n  }, [user._id]);\n\n  useEffect(() => {\n    const getMessages = async () => {\n       \n      try {\n        const res = await axios.get(\n          \"http://localhost:8000/api/messages/\" + currentChat._id\n        );\n        setMessages(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n  getMessages()\n    \n  }, [currentChat]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const message = {\n      sender: user._id,\n      text: newMessage,\n      conversationId: currentChat._id,\n    };\n\n    try {\n      const res = await axios.post(\n        \"http://localhost:8000/api/messages\",\n        message\n      );\n      setMessages([...messages, res.data]);\n      setNewMessage(\"\");\n    } catch (err) {\n      console.log(err);\n    }\n\n    const receiverId = currentChat.members.find(\n      (member) => member !== user._id\n    );\n\n    socket.current.emit(\"sendMessage\", {\n      senderId: user._id,\n      receiverId,\n      text: newMessage,\n    });\n  };\n\n  useEffect(() => {\n    scrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  return (\n    <div className=\"messengerPage\">\n      <div className=\"messengerBox\">\n        <div className=\"messengerLeft\">\n          <h1>All conversations</h1>\n          <div >\n            {conversations.map((conversation) => (\n              <div onClick={() => setCurrentChat(conversation)}>\n                <Conversation\n                  key={conversation._id}\n                  conversation={conversation}\n                  currentUser={user}\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"messengerMiddle\">\n             {/* Chat */}\n          <div className=\"chatBoxWrapper\">\n            {currentChat ? (\n              <div className=\"chatWrapper\">\n                 \n                <div className=\"top\">\n                    <div>\n                    {/* infobar */}\n                  <h1>name</h1>\n                  <button>modifier</button>\n                  {/* infobar */}\n                  </div>\n                </div>\n                <div className=\"chatBoxMiddle\">\n                  {messages.map((m) => (\n                      <div  ref={scrollRef}>\n                    <Message message={m} own={m.sender === user._id} />\n                    </div>\n                  ))}\n                </div>\n                <div className=\"chatBoxBottom\">\n                    {/* input */}\n                  <textarea\n                    className=\"chatMessageInput\"\n                    placeholder=\"write something...\"\n                    onChange={(e) => setNewMessage(e.target.value)}\n                    value={newMessage}\n                  ></textarea>\n                  <button onClick={handleSubmit}>Send</button>\n                    {/* input */}\n                </div>\n              </div>\n            ) : (\n              <div className=\"noConversationText\">\n                <span>Open a conversation to start a chat.</span>\n              </div>\n            )}\n          </div>\n           {/* Chat */}\n        </div>\n\n\n\n        <div className=\"right\">\n            \n<h1>User Online</h1>\n<User />\n<User />\n<User />\n            {/* user */}\n<button>create conv</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}