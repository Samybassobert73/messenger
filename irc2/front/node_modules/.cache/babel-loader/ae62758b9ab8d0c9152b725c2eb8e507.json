{"ast":null,"code":"var _jsxFileName = \"/home/samy/irc/front/src/pages/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\nimport Infobar from \"../components/Infobar\";\nimport Input from \"../components/Input\";\nimport Messages from \"../components/Messages\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chat() {\n  _s();\n\n  //nom\n  const [name, setName] = useState(\"\"); //room\n\n  const [room, setRoom] = useState(\"\"); // le message envoyé\n\n  const [message, setMessage] = useState(\"\"); //tout les messages\n\n  const [messages, setMessages] = useState([]); //adress du server\n\n  const ENDPOINT = \"localhost:8000\";\n  let socket;\n  useEffect(() => {\n    //on recupere les parametre get de l'url\n    const {\n      name,\n      room\n    } = queryString.parse(window.location.search); //cree la connection\n\n    socket = io(ENDPOINT);\n    console.log(socket); // on recupere le name du gars et la room dans l'url et on la set\n\n    setRoom(room);\n    setName(name); // on envoie le nom du gars et la room\n\n    socket.emit(\"join\", {\n      name,\n      room\n    }, error => {\n      if (error) {\n        alert(error);\n      }\n\n      return () => {\n        socket.emit(\"disconnect\");\n        socket.off();\n      };\n    });\n  }, [ENDPOINT, window.location.search]);\n  useEffect(() => {\n    //   si on recoit un message on le met dans le tableau messages\n    socket.on(\"message\", message => {\n      setMessages(messages => [...messages, message]);\n    });\n  }, [messages]);\n\n  const sendMessage = event => {\n    event.preventDefault(); //   on envoie le message et on reset l'input\n\n    if (message) {\n      socket.emit(\"sendMessage\", message, () => setMessage(\"\"));\n    }\n  };\n\n  console.log(message, messages);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Infobar, {\n      room: room\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Messages, {\n      messages: messages,\n      name: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      message: message,\n      setMessage: setMessage,\n      sendMessage: sendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chat, \"DGTtK+cnWWSeRGiKbfaQ0Z+rBO8=\");\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/home/samy/irc/front/src/pages/Chat.js"],"names":["React","useState","useEffect","queryString","io","Infobar","Input","Messages","Chat","name","setName","room","setRoom","message","setMessage","messages","setMessages","ENDPOINT","socket","parse","window","location","search","console","log","emit","error","alert","off","on","sendMessage","event","preventDefault"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\nimport Infobar from \"../components/Infobar\";\nimport Input from \"../components/Input\";\nimport Messages from \"../components/Messages\";\n\n\nexport default function Chat() {\n  //nom\n  const [name, setName] = useState(\"\");\n  //room\n  const [room, setRoom] = useState(\"\");\n  // le message envoyé\n  const [message, setMessage] = useState(\"\");\n  //tout les messages\n  const [messages, setMessages] = useState([]);\n  //adress du server\n  const ENDPOINT = \"localhost:8000\";\n  let socket;\n  useEffect(() => {\n    //on recupere les parametre get de l'url\n    const { name, room } = queryString.parse(window.location.search);\n    //cree la connection\n    socket = io(ENDPOINT);\n    console.log(socket);\n    // on recupere le name du gars et la room dans l'url et on la set\n    setRoom(room);\n    setName(name);\n    // on envoie le nom du gars et la room\n    socket.emit(\"join\", { name, room }, (error) => {\n      if (error) {\n        alert(error);\n      }\n      return () => {\n        socket.emit(\"disconnect\");\n        socket.off();\n      };\n    });\n  }, [ENDPOINT, window.location.search]);\n\n  useEffect(() => {\n    //   si on recoit un message on le met dans le tableau messages\n    socket.on(\"message\", (message) => {\n      setMessages((messages) => [...messages, message]);\n    });\n  }, [messages]);\n\n  const sendMessage = (event) => {\n    event.preventDefault();\n    //   on envoie le message et on reset l'input\n    if (message){\n      socket.emit(\"sendMessage\", message, () => setMessage(\"\"));\n    }\n  };\n  console.log(message, messages);\n  return (\n    <div>\n      <Infobar room={room} />\n      <Messages messages={messages} name={name} />\n      <Input\n        message={message}\n        setMessage={setMessage}\n        sendMessage={sendMessage}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}