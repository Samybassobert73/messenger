{"ast":null,"code":"var _jsxFileName = \"/home/samy/irc/front/src/pages/Chat/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\nimport Infobar from \"../../components/Infobar\";\nimport Input from \"../../components/Input\";\nimport Messages from \"../../components/Messages\";\nimport Users from \"../../components/Users\";\nimport './chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\nexport default function Chat() {\n  _s();\n\n  //nom\n  const [name, setName] = useState(\"\"); //room\n\n  const [room, setRoom] = useState(\"\"); // le message envoyé\n\n  const [message, setMessage] = useState(\"\"); //tout les messages\n\n  const [messages, setMessages] = useState([]); //tout les messages\n\n  const [users, setUsers] = useState(\"\"); //adress du server\n\n  const ENDPOINT = \"localhost:8000\";\n  useEffect(() => {\n    //on recupere les parametre get de l'url\n    const {\n      name,\n      room\n    } = queryString.parse(window.location.search); //cree la connection\n\n    socket = io(ENDPOINT);\n    console.log(socket); // on recupere le name du gars et la room dans l'url et on la set\n\n    setRoom(room);\n    setName(name); // on envoie le nom du gars et la room\n\n    socket.emit(\"join\", {\n      name,\n      room\n    }, error => {\n      if (error) {\n        alert(error);\n      }\n\n      return () => {\n        socket.emit(\"disconnect\");\n        socket.off();\n      };\n    });\n  }, [ENDPOINT, window.location.search]);\n  useEffect(() => {\n    //   si on recoit un message on le met dans le tableau messages\n    socket.on(\"message\", message => {\n      setMessages(messages => [...messages, message]);\n    });\n    socket.on(\"roomData\", _ref => {\n      let {\n        users\n      } = _ref;\n      setUsers(users);\n    });\n  }, []);\n\n  const sendMessage = event => {\n    event.preventDefault(); //   on envoie le message et on reset l'input\n\n    if (message) {\n      socket.emit(\"sendMessage\", message, () => setMessage(\"\"));\n    }\n  };\n\n  console.log(message, messages);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatPage\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"joinBox\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"joinContainer\",\n        children: [/*#__PURE__*/_jsxDEV(Infobar, {\n          room: room\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Messages, {\n          messages: messages,\n          name: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          message: message,\n          setMessage: setMessage,\n          sendMessage: sendMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chat, \"HT+J4PzYcqpZAFNi3cY4cpdw4uE=\");\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/home/samy/irc/front/src/pages/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","Infobar","Input","Messages","Users","socket","Chat","name","setName","room","setRoom","message","setMessage","messages","setMessages","users","setUsers","ENDPOINT","parse","window","location","search","console","log","emit","error","alert","off","on","sendMessage","event","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAO,YAAP;;AACA,IAAIC,MAAJ;AACA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC7B;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC,CAF6B,CAG7B;;AACA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC,CAJ6B,CAK7B;;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,EAAD,CAAtC,CAN6B,CAO7B;;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,EAAD,CAAxC,CAR6B,CAS7B;;AACA,QAAM,CAACkB,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC,EAAD,CAAlC,CAV6B,CAW7B;;AACA,QAAMoB,QAAQ,GAAG,gBAAjB;AAEAnB,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAM;AAAES,MAAAA,IAAF;AAAQE,MAAAA;AAAR,QAAiBV,WAAW,CAACmB,KAAZ,CAAkBC,MAAM,CAACC,QAAP,CAAgBC,MAAlC,CAAvB,CAFc,CAGd;;AACAhB,IAAAA,MAAM,GAAGL,EAAE,CAACiB,QAAD,CAAX;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYlB,MAAZ,EALc,CAMd;;AACAK,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAD,IAAAA,OAAO,CAACD,IAAD,CAAP,CARc,CASd;;AACAF,IAAAA,MAAM,CAACmB,IAAP,CAAY,MAAZ,EAAoB;AAAEjB,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAApB,EAAqCgB,KAAD,IAAW;AAC7C,UAAIA,KAAJ,EAAW;AACTC,QAAAA,KAAK,CAACD,KAAD,CAAL;AACD;;AACD,aAAO,MAAM;AACXpB,QAAAA,MAAM,CAACmB,IAAP,CAAY,YAAZ;AACAnB,QAAAA,MAAM,CAACsB,GAAP;AACD,OAHD;AAID,KARD;AASD,GAnBQ,EAmBN,CAACV,QAAD,EAAWE,MAAM,CAACC,QAAP,CAAgBC,MAA3B,CAnBM,CAAT;AAqBAvB,EAAAA,SAAS,CAAC,MAAM;AACd;AACAO,IAAAA,MAAM,CAACuB,EAAP,CAAU,SAAV,EAAsBjB,OAAD,IAAa;AAChCG,MAAAA,WAAW,CAAED,QAAD,IAAc,CAAC,GAAGA,QAAJ,EAAcF,OAAd,CAAf,CAAX;AACD,KAFD;AAGAN,IAAAA,MAAM,CAACuB,EAAP,CAAU,UAAV,EAAsB,QAAa;AAAA,UAAZ;AAACb,QAAAA;AAAD,OAAY;AAE/BC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AAED,KAJH;AAMD,GAXQ,EAWP,EAXO,CAAT;;AAaA,QAAMc,WAAW,GAAIC,KAAD,IAAW;AAC7BA,IAAAA,KAAK,CAACC,cAAN,GAD6B,CAE7B;;AACA,QAAIpB,OAAJ,EAAY;AACVN,MAAAA,MAAM,CAACmB,IAAP,CAAY,aAAZ,EAA2Bb,OAA3B,EAAoC,MAAMC,UAAU,CAAC,EAAD,CAApD;AACD;AACF,GAND;;AAOAU,EAAAA,OAAO,CAACC,GAAR,CAAYZ,OAAZ,EAAqBE,QAArB;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,gCACF,QAAC,OAAD;AAAS,UAAA,IAAI,EAAEJ;AAAf;AAAA;AAAA;AAAA;AAAA,gBADE,eAEF,QAAC,QAAD;AAAU,UAAA,QAAQ,EAAEI,QAApB;AAA8B,UAAA,IAAI,EAAEN;AAApC;AAAA;AAAA;AAAA;AAAA,gBAFE,eAGF,QAAC,KAAD;AACE,UAAA,OAAO,EAAEI,OADX;AAEE,UAAA,UAAU,EAAEC,UAFd;AAGE,UAAA,WAAW,EAAEiB;AAHf;AAAA;AAAA;AAAA;AAAA,gBAHE;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAxEuBvB,I;;KAAAA,I","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\nimport Infobar from \"../../components/Infobar\";\nimport Input from \"../../components/Input\";\nimport Messages from \"../../components/Messages\";\nimport Users from \"../../components/Users\";\nimport './chat.css';\nlet socket;\nexport default function Chat() {\n  //nom\n  const [name, setName] = useState(\"\");\n  //room\n  const [room, setRoom] = useState(\"\");\n  // le message envoyé\n  const [message, setMessage] = useState(\"\");\n  //tout les messages\n  const [messages, setMessages] = useState([]);\n  //tout les messages\n  const [users, setUsers] = useState(\"\");\n  //adress du server\n  const ENDPOINT = \"localhost:8000\";\n  \n  useEffect(() => {\n    //on recupere les parametre get de l'url\n    const { name, room } = queryString.parse(window.location.search);\n    //cree la connection\n    socket = io(ENDPOINT);\n    console.log(socket);\n    // on recupere le name du gars et la room dans l'url et on la set\n    setRoom(room);\n    setName(name);\n    // on envoie le nom du gars et la room\n    socket.emit(\"join\", { name, room }, (error) => {\n      if (error) {\n        alert(error);\n      }\n      return () => {\n        socket.emit(\"disconnect\");\n        socket.off();\n      };\n    });\n  }, [ENDPOINT, window.location.search]);\n\n  useEffect(() => {\n    //   si on recoit un message on le met dans le tableau messages\n    socket.on(\"message\", (message) => {\n      setMessages((messages) => [...messages, message]);\n    });\n    socket.on(\"roomData\", ({users}) => {\n       \n        setUsers(users);\n        \n      });\n\n  },[]);\n\n  const sendMessage = (event) => {\n    event.preventDefault();\n    //   on envoie le message et on reset l'input\n    if (message){\n      socket.emit(\"sendMessage\", message, () => setMessage(\"\"));\n    }\n  };\n  console.log(message, messages);\n  return (\n    <div className=\"chatPage\">\n    <div className=\"joinBox\">\n        <div className=\"joinContainer\">\n      <Infobar room={room} />\n      <Messages messages={messages} name={name} />\n      <Input\n        message={message}\n        setMessage={setMessage}\n        sendMessage={sendMessage}\n      />\n      \n      </div>\n    </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}